name: CI/CD Pipeline
on:
  push:
    branches:
      - main
env:
  TF_VERSION: 1.9.x
  TF_WORKING_DIR: './'
jobs:
  terraform:
    name: Terraform
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: ${{ env.TF_VERSION }}
      - name: Terraform Init
        run: terraform init -chdir=${{ env.TF_WORKING_DIR }} -input=false
      - name: Terraform Plan
        run: terraform plan -chdir=${{ env.TF_WORKING_DIR }} -input=false -out=tfplan
      - name: Terraform Apply
        run: terraform apply -chdir=${{ env.TF_WORKING_DIR }} -auto-approve tfplan
        if: github.ref == 'refs/heads/main'
  error_handling:
    name: Error Handling
    runs-on: ubuntu-latest
    if: failure()
    steps:
      - name: Create GitHub issue
        uses: actions/github-script@v6
        with:
          script: |
            const issue = {
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: "CI/CD pipeline failed",
              body: `Run ID: ${context.runId}\n\nLogs: ${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}`
            }
            github.issues.create(issue)
  app_deployment:
    name: App Deployment
    runs-on: ubuntu-latest
    needs: terraform
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
      - name: Setup SSH
        run: |
          mkdir -p ~/.ssh/
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ steps.terraform.outputs.instance_public_ip }} >> ~/.ssh/known_hosts
      - name: Deploy App
        run: |
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa ubuntu@${{ steps.terraform.outputs.instance_public_ip }} "cd /path/to/app && python3 -m venv venv && source venv/bin/activate && pip install -r requirements.txt && nohup python app.py &"